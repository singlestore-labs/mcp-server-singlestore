name: Process Release Markers

on:
  push:
    branches: [ main ]

jobs:
  check-release-marker:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      release-type: ${{ steps.check.outputs.release-type }}
      new-version: ${{ steps.check.outputs.new-version }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to detect changes

    - name: Check for release marker
      id: check
      run: |
        # Check if release marker exists and was added in this push
        if [ -f ".release-marker" ]; then
          # Check if this file was added in the current push
          if git diff --name-only HEAD~1 HEAD | grep -q "^\.release-marker$"; then
            echo "üìù Release marker found and was just added"

            # Source the marker file
            source .release-marker

            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

            echo "Release details:"
            echo "  Type: $RELEASE_TYPE"
            echo "  Version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
            echo "  Branch: $BRANCH"
          else
            echo "üìù Release marker exists but wasn't added in this push"
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "üìù No release marker found"
          echo "should-release=false" >> $GITHUB_OUTPUT
        fi

  create-release:
    needs: check-release-marker
    if: needs.check-release-marker.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write      # For creating tags and pushing commits
      actions: write       # For workflow permissions
      pull-requests: write # For creating PRs (if needed as fallback)

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Process release
      env:
        NEW_VERSION: ${{ needs.check-release-marker.outputs.new-version }}
        RELEASE_TYPE: ${{ needs.check-release-marker.outputs.release-type }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üöÄ Processing $RELEASE_TYPE release: $NEW_VERSION"

        # Update version file
        echo "__version__ = \"$NEW_VERSION\"" > src/version.py

        # Remove release marker
        rm -f .release-marker

        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Commit version bump
        git add src/version.py .release-marker
        git commit -m "chore: bump version to $NEW_VERSION [skip ci]"

        # Create and push tag
        git tag "v$NEW_VERSION"

        # Try to push to main - with error handling
        if git push origin main; then
          echo "‚úÖ Successfully pushed to main"
          git push origin "v$NEW_VERSION"
          echo "‚úÖ Version bumped and tagged: v$NEW_VERSION"
          echo "üöÄ PyPI publication will be triggered automatically"
        else
          echo "‚ùå Failed to push to main - branch protection issue"
          echo "üîÑ Attempting fallback: creating PR for version bump"

          # Fallback: Create PR for version bump
          TEMP_BRANCH="release-bump-$NEW_VERSION-$(date +%s)"
          git checkout -b "$TEMP_BRANCH"
          git push origin "$TEMP_BRANCH"

          # Create PR
          gh pr create \
            --title "chore: bump version to $NEW_VERSION" \
            --body "Automated version bump to $NEW_VERSION. This PR was created because the workflow couldn't push directly to main. Please review and merge, then manually create tag: git tag v$NEW_VERSION && git push origin v$NEW_VERSION" \
            --base main \
            --head "$TEMP_BRANCH"

          echo "üìã Created PR for manual review and merge"
          echo "‚ö†Ô∏è  Manual action required: merge PR and create tag"
        fi
