name: Publish Python Package

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.2.3
  workflow_dispatch:  # Allows manual triggering

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # OIDC authentication with PyPI

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Verify tag matches version
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}

        # Get version from version.py
        FILE_VERSION=$(python -c "exec(open('src/version.py').read()); print(__version__)")

        echo "Tag version: $TAG_VERSION"
        echo "File version: $FILE_VERSION"

        if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
          echo "❌ Version mismatch! Tag: $TAG_VERSION, File: $FILE_VERSION"
          exit 1
        fi
        echo "✅ Version check passed"

    - name: Lint and format with Ruff
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/

    - name: Run tests
      run: |
        uv run pytest

    - name: Build package
      run: |
        uv run python -m build

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_KEY }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
